/* 1. ask for expression
2.if a to z push to popstack
3.else push to opstack
4. if ) comes move op to pop
5. if any operator comes after & then move op to pop
6. if any operator comes after * or / except & move op to pop
7. if expression end the move op to pop
and print last pop as postfix*/
#include<iostream>
#include<stack>
#include<string>
using namespace std;
class con{
	public:
		int proc(char c){
			if(c=='$'||c=='^'){
				return 3;
			}
			else if(c=='*'||c=='/'){
				return 2;
			}
			else if(c=='+'||c=='-'){
				return 1;
			}
			else {
				return -1;
				
			}
		}
		int intopost(string s){
			stack<char>st;
			string res;
		for(int i=0;i<s.length();i++){
			if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')){
				res+= s[i];
			}
			else if(s[i]=='('){
				st.push(s[i]);
			
		
			}
			else if(s[i]==')'){
				while(!st.empty()&& st.top()!='('){
					res+=st.top();
					st.pop();
					
				}
				if(!st.empty()){
					st.pop();
				}
			}
			else{
			while(!st.empty()&&proc(st.top())>proc(s[i]))
			{
					res+=st.top();
						st.pop();
							}
							st.push(s[i]);
			}
		}
		while(!st.empty()){
			res+=st.top();
			st.pop();
		}
		
		cout<<res<<endl;	
		}
		int infix_to_prefix(string k){
		int n = k.size();
    for (int i = 0; i < n / 2; i++) {

        char temp = k[i];
        k[i] = k[n - i - 1];
        k[n - i - 1] = temp;


        if (k[i] == '(') k[i] = ')';
        else if (k[i] == ')') k[i] = '(';

        if (k[n - i - 1] == '(') k[n - i - 1] = ')';
        else if (k[n - i - 1] == ')') k[n - i - 1] = '(';
    }

   
    if (n % 2 != 0) {
        int mid = n / 2;
        if (k[mid] == '(') k[mid] = ')';
        else if (k[mid] == ')') k[mid] = '(';
    }

    cout<<k<<endl;
    	stack<char>st2;
			string ress;
		for(int i=0;i<k.length();i++){
			if((k[i] >= 'a' && k[i] <= 'z') || (k[i] >= 'A' && k[i] <= 'Z')){
				ress+= k[i];
			}
			else if(k[i]=='('){
				st2.push(k[i]);
			
		
			}
			else if(k[i]==')'){
				while(!st2.empty()&& st2.top()!='('){
					ress+=st2.top();
					st2.pop();
					
				}
				if(!st2.empty()){
					st2.pop();
				}
			}
			else{
			while(!st2.empty()&&proc(st2.top())>proc(k[i]))
			{
					ress+=st2.top();
						st2.pop();
							}
							st2.push(k[i]);
			}
		}
		while(!st2.empty()){
			ress+=st2.top();
			st2.pop();
		}
		int m = ress.size();
    for (int i = 0; i < n / 2; i++) {
        
        char temp = ress[i];
        ress[i] = ress[m- i - 1];
        ress[m - i - 1] = temp;

       
        if (ress[i] == '(') ress[i] = ')';
        else if (ress[i] == ')') ress[i] = '(';

        if (ress[m - i - 1] == '(') ress[m - i - 1] = ')';
        else if (ress[m - i - 1] == ')') ress[m - i - 1] = '(';
    }

    // Handle the middle character if the string length is odd
    if (m % 2 != 0) {
        int mid = m / 2;
        if (ress[mid] == '(') ress[mid] = ')';
        else if (ress[mid] == ')') ress[mid] = '(';
    }

    cout<<ress<<endl;
    
		}
	
};
int main(){
	int a;
	
	con c;
	string ex,ex1;
	char p;
	do{
	cout<<"Sandeep"<<endl;
	cout<<"\t\t\t\tMENU"<<endl;
	cout<<"Enter 1 for infix to postfix"<<endl;
	cout<<"Enter 2 for infix to prefix"<<endl;
	cin>>a;
	switch(a){
		case 1:
			cout<<"Enter your expression"<<endl;
			cin>>ex;
			c.intopost(ex);
			break;
		case 2:
			cout<<"enter your expression"<<endl;
			cin>>ex1;
			c.infix_to_prefix(ex1);
			
	}
	cout<<"do you want to continue?(y/n)"<<endl;
	cin>>p;
}while(p=='y');


return 0;
}
